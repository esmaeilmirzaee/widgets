[{"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/App.jsx":"1","/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Accordion.jsx":"2","/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Counter.jsx":"3","/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Search.jsx":"4","/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Dropdown.jsx":"5"},{"size":1537,"mtime":1607982174000,"results":"6","hashOfConfig":"7"},{"size":756,"mtime":1607931184000,"results":"8","hashOfConfig":"7"},{"size":511,"mtime":1607932050000,"results":"9","hashOfConfig":"7"},{"size":2060,"mtime":1607977955000,"results":"10","hashOfConfig":"7"},{"size":1432,"mtime":1608020871000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1010x18",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/App.jsx",["23"],"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Accordion.jsx",[],"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Counter.jsx",[],"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Search.jsx",[],"/Volumes/TheBeaver-32G/code/lab/front/react/widgets/src/components/Dropdown.jsx",["24"],"import React, { useState, useEffect, useRef } from 'react';\n\nconst Dropdown = ({ options, selected, setSelectedColour }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    const onBodyClick = (e) => {\n      console.log(open);\n      if (ref.current.contains(e.target)) {\n        return;\n      }\n      setOpen(false);\n    };\n\n    document.body.addEventListener('click', onBodyClick);\n\n    return () => {\n      document.body.removeEventListener('click', onBodyClick);\n    };\n  }, []);\n\n  const renderedOptions = options.map((option) => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return (\n      <div\n        value={option.label}\n        key={option.label}\n        className='item'\n        onClick={() => setSelectedColour(option)}\n      >\n        {option.value}\n      </div>\n    );\n  });\n  return (\n    <div ref={ref} className='ui form'>\n      <div className='field'>\n        <label className='label'>Select a colour</label>\n        <div\n          onClick={() => setOpen(!open)}\n          className={`ui selection dropdown ${open ? 'visible active' : ''}`}\n        >\n          <i className='dropdown icon'></i>\n          <div className='text'>{selected.label}</div>\n          <div className={`menu ${open ? 'visible transition' : ''}`}>\n            {renderedOptions}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n",{"ruleId":"25","severity":1,"message":"26","line":5,"column":7,"nodeType":"27","messageId":"28","endLine":5,"endColumn":12},{"ruleId":"29","severity":1,"message":"30","line":21,"column":6,"nodeType":"31","endLine":21,"endColumn":8,"suggestions":"32"},"no-unused-vars","'items' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [open]",{"range":"36","text":"37"},[523,525],"[open]"]